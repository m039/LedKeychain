#include <animation/TextAnimation.h>

const uint8_t font5x7_ru[] = {
    0b01110000,
    0b10001000,
    0b10001000,
    0b11111000,
    0b10001000,
    0b10001000,
    0b10001000,
    6, /* А */
    0b11111000,
    0b10000000,
    0b10000000,
    0b11110000,
    0b10001000,
    0b10001000,
    0b11110000,
    6, /* Б */
    0b11110000,
    0b10001000,
    0b10001000,
    0b11110000,
    0b10001000,
    0b10001000,
    0b11110000,
    6, /* В */
    0b11111000,
    0b10000000,
    0b10000000,
    0b10000000,
    0b10000000,
    0b10000000,
    0b10000000,
    6, /* Г */
    0b01110000,
    0b01010000,
    0b01010000,
    0b01010000,
    0b01010000,
    0b01010000,
    0b11111000,
    6, /* Д */
    0b11111000,
    0b10000000,
    0b10000000,
    0b11110000,
    0b10000000,
    0b10000000,
    0b11111000,
    6, /* Е */
    0b10101000,
    0b10101000,
    0b10101000,
    0b01110000,
    0b10101000,
    0b10101000,
    0b10101000,
    6, /* Ж */
    0b01110000,
    0b10001000,
    0b00001000,
    0b00110000,
    0b00001000,
    0b10001000,
    0b01110000,
    6, /* З */
    0b10001000,
    0b10011000,
    0b10101000,
    0b11001000,
    0b10001000,
    0b10001000,
    0b10001000,
    6, /* И */
    0b01010000,
    0b00100000,
    0b10001000,
    0b10011000,
    0b10101000,
    0b11001000,
    0b10001000,
    6, /* Й */
    0b10001000,
    0b10010000,
    0b10100000,
    0b11000000,
    0b10100000,
    0b10010000,
    0b10001000,
    6, /* К */
    0b01111000,
    0b01001000,
    0b01001000,
    0b01001000,
    0b01001000,
    0b01001000,
    0b10001000,
    6, /* Л */
    0b10001000,
    0b11011000,
    0b10101000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b10001000,
    6, /* М */
    0b10001000,
    0b10001000,
    0b10001000,
    0b11111000,
    0b10001000,
    0b10001000,
    0b10001000,
    6, /* Н */
    0b01110000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b01110000,
    6, /* О */
    0b11111000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b10001000,
    7, /* П */
    0b11110000,
    0b10001000,
    0b10001000,
    0b11110000,
    0b10000000,
    0b10000000,
    0b10000000,
    6, /* Р */
    0b01110000,
    0b10001000,
    0b10000000,
    0b10000000,
    0b10000000,
    0b10001000,
    0b01110000,
    6, /* С */
    0b11111000,
    0b00100000,
    0b00100000,
    0b00100000,
    0b00100000,
    0b00100000,
    0b00000000,
    6, /* Т */
    0b10001000,
    0b10001000,
    0b01010000,
    0b01010000,
    0b00100000,
    0b00100000,
    0b01000000,
    6, /* У */
    0b00100000,
    0b01110000,
    0b10101000,
    0b10101000,
    0b10101000,
    0b01110000,
    0b00100000,
    6, /* Ф */
    0b10001000,
    0b01010000,
    0b00100000,
    0b00100000,
    0b00100000,
    0b01010000,
    0b10001000,
    6, /* Х */
    0b10010000,
    0b10010000,
    0b10010000,
    0b10010000,
    0b10010000,
    0b10010000,
    0b11111000,
    6, /* Ц */
    0b10001000,
    0b10001000,
    0b10001000,
    0b01111000,
    0b00001000,
    0b00001000,
    0b00001000,
    6, /* Ч */
    0b10101000,
    0b10101000,
    0b10101000,
    0b10101000,
    0b10101000,
    0b10101000,
    0b11111000,
    6, /* Ш */
    0b11010000,
    0b11010000,
    0b11010000,
    0b11010000,
    0b11010000,
    0b11010000,
    0b11111000,
    6, /* Щ */
    0b11000000,
    0b01000000,
    0b01000000,
    0b01110000,
    0b01001000,
    0b01001000,
    0b01110000,
    6, /* Ъ */
    0b10001000,
    0b10001000,
    0b10001000,
    0b11001000,
    0b10101000,
    0b10101000,
    0b11001000,
    6, /* Ы */
    0b10000000,
    0b10000000,
    0b10000000,
    0b11110000,
    0b10001000,
    0b10001000,
    0b11110000,
    06, /* Ь */
    0b01110000,
    0b10001000,
    0b00001000,
    0b00111000,
    0b00001000,
    0b10001000,
    0b01110000,
    6, /* Э */
    0b10010000,
    0b10101000,
    0b10101000,
    0b11101000,
    0b10101000,
    0b10101000,
    0b10010000,
    6, /* Ю */
    0b01111000,
    0b10001000,
    0b10001000,
    0b01111000,
    0b00101000,
    0b01001000,
    0b10001000,
    6, /* Я */
    0b00000000,
    0b00000000,
    0b00111000,
    0b01001000,
    0b10001000,
    0b10011000,
    0b01101000,
    6, /* а */
    0b01111000,
    0b10000000,
    0b11110000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b01110000,
    6, /* б */
    0b00000000,
    0b00000000,
    0b11110000,
    0b10001000,
    0b11110000,
    0b10001000,
    0b11110000,
    6, /* в */
    0b00000000,
    0b00000000,
    0b11111000,
    0b10000000,
    0b10000000,
    0b10000000,
    0b10000000,
    6, /* г */
    0b01110000,
    0b01010000,
    0b01010000,
    0b01010000,
    0b11111000,
    0b10001000,
    0b10001000,
    6, /* д */
    0b00000000,
    0b00000000,    
    0b01110000,
    0b10001000,
    0b11111000,
    0b10000000,
    0b01110000,
    6, /* е */
    0b00000000,
    0b00000000,    
    0b10101000,
    0b10101000,
    0b01110000,
    0b10101000,
    0b10101000,
    6, /* ж */
    0b00000000,
    0b00000000,    
    0b11110000,
    0b00001000,
    0b00110000,
    0b00001000,
    0b11110000,
    6, /* з */
    0b00000000,
    0b00000000,    
    0b10001000,
    0b10011000,
    0b10101000,
    0b11001000,
    0b10001000,
    6, /* и */
    0b01010000,
    0b00100000,
    0b10001000,
    0b10011000,
    0b10101000,
    0b11001000,
    0b10001000,
    6, /* й */
    0b00000000,
    0b00000000,    
    0b10001000,
    0b10010000,
    0b11100000,
    0b10010000,
    0b10001000,
    6, /* к */
    0b00000000,
    0b00000000,    
    0b01111000,
    0b01001000,
    0b01001000,
    0b01001000,
    0b10001000,
    6, /* л */
    0b00000000,
    0b00000000,    
    0b10001000,
    0b11011000,
    0b10101000,
    0b10001000,
    0b10001000,
    6, /* м */
    0b00000000,
    0b00000000,    
    0b10001000,
    0b10001000,
    0b11111000,
    0b10001000,
    0b10001000,
    6, /* н */
    0b00000000,
    0b00000000,    
    0b01110000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b01110000,
    6, /* о */
    0b00000000,
    0b00000000,    
    0b11111000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b10001000,
    6, /* п */
    0b00000000,
    0b00000000,
    0b11100000,
    0b10010000,
    0b10010000,
    0b11100000,
    0b10000000,
    5, /* р */
    0b00000000,
    0b00000000,
    0b00000000,    
    0b01111000,
    0b10000000,
    0b10000000,
    0b01111000,
    6, /* с */
    0b00000000,
    0b00000000,
    0b11111000,
    0b00100000,    
    0b00100000,
    0b00100000,
    0b00100000,
    6, /* т */
    0b10001000,
    0b10001000,
    0b01010000,
    0b01010000,
    0b00100000,
    0b00100000,
    0b11000000,
    6, /* у */
    0b00100000,
    0b00100000,
    0b01110000,
    0b10101000,
    0b10101000,
    0b10101000,
    0b01110000,
    6, /* ф */
    0b00000000,
    0b00000000,    
    0b10001000,
    0b01010000,
    0b00100000,
    0b01010000,
    0b10001000,
    6, /* х */
    0b10010000,
    0b10010000,
    0b10010000,
    0b10010000,
    0b11111000,
    0b00001000,
    0b00001000,
    6, /* ц */
    0b00000000,
    0b00000000,    
    0b10001000,
    0b10001000,
    0b01111000,
    0b00001000,
    0b00001000,
    6, /* ч */
    0b00000000,
    0b00000000,    
    0b10101000,
    0b10101000,
    0b10101000,
    0b10101000,
    0b11111000,
    6, /* ш */
    0b11010000,
    0b11010000,
    0b11010000,
    0b11010000,
    0b11111000,
    0b00001000,
    0b00001000,
    6, /* щ */
    0b00000000,
    0b00000000,    
    0b11000000,
    0b01000000,
    0b01110000,
    0b01001000,
    0b01110000,
    6, /* ъ */
    0b00000000,
    0b00000000,    
    0b10001000,
    0b10001000,
    0b11001000,
    0b10101000,
    0b11001000,
    6, /* ы */
    0b00000000,
    0b00000000,    
    0b10000000,
    0b10000000,
    0b11110000,
    0b10001000,
    0b11110000,
    6, /* ь */
    0b00000000,
    0b00000000,    
    0b11100000,
    0b00011000,
    0b01111000,
    0b00001000,
    0b11100000,
    6, /* э */
    0b00000000,
    0b00000000,    
    0b10010000,
    0b10101000,
    0b11101000,
    0b10101000,
    0b10010000,
    6, /* ю */
    0b00000000,
    0b00000000,    
    0b01111000,
    0b10001000,
    0b01111000,
    0b00101000,
    0b11001000,
    6, /* я */
};

const uint8_t font5x7[] = { // Numeric Font Matrix (Arranged as 7x font data + 1x kerning data)
    0b00000000,             // letter spacing
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    3,
    // Space (Char 0x20)

    0b01000000,
    0b01000000,
    0b01000000,
    0b01000000,
    0b01000000,
    0b00000000,
    0b01000000,
    2, //!

    0b10100000,
    0b10100000,
    0b10100000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    4, //"

    0b01010000,
    0b01010000,
    0b11111000,
    0b01010000,
    0b11111000,
    0b01010000,
    0b01010000,
    6, // #

    0b00100000,
    0b01111000,
    0b10100000,
    0b01110000,
    0b00101000,
    0b11110000,
    0b00100000,
    6, //$

    0b11000000,
    0b11001000,
    0b00010000,
    0b00100000,
    0b01000000,
    0b10011000,
    0b00011000,
    6, //%

    0b01100000,
    0b10010000,
    0b10100000,
    0b01000000,
    0b10101000,
    0b10010000,
    0b01101000,
    6, //&

    0b11000000,
    0b01000000,
    0b10000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    3, //'

    0b00100000,
    0b01000000,
    0b10000000,
    0b10000000,
    0b10000000,
    0b01000000,
    0b00100000,
    4, //(

    0b10000000,
    0b01000000,
    0b00100000,
    0b00100000,
    0b00100000,
    0b01000000,
    0b10000000,
    4, //)

    0b00000000,
    0b00100000,
    0b10101000,
    0b01110000,
    0b10101000,
    0b00100000,
    0b00000000,
    6, //*

    0b00000000,
    0b00100000,
    0b00100000,
    0b11111000,
    0b00100000,
    0b00100000,
    0b00000000,
    6, //+

    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b11000000,
    0b01000000,
    0b10000000,
    3, //,

    0b00000000,
    0b00000000,
    0b11111000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    6, //-

    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b11000000,
    0b11000000,
    3, //.

    0b00000000,
    0b00001000,
    0b00010000,
    0b00100000,
    0b01000000,
    0b10000000,
    0b00000000,
    6, ///

    0b01110000,
    0b10001000,
    0b10011000,
    0b10101000,
    0b11001000,
    0b10001000,
    0b01110000,
    6, // 0

    0b01000000,
    0b11000000,
    0b01000000,
    0b01000000,
    0b01000000,
    0b01000000,
    0b11100000,
    4, // 1

    0b01110000,
    0b10001000,
    0b00001000,
    0b00010000,
    0b00100000,
    0b01000000,
    0b11111000,
    6, // 2

    0b11111000,
    0b00010000,
    0b00100000,
    0b00010000,
    0b00001000,
    0b10001000,
    0b01110000,
    6, // 3

    0b00010000,
    0b00110000,
    0b01010000,
    0b10010000,
    0b11111000,
    0b00010000,
    0b00010000,
    6, // 4

    0b11111000,
    0b10000000,
    0b11110000,
    0b00001000,
    0b00001000,
    0b10001000,
    0b01110000,
    6, // 5

    0b00110000,
    0b01000000,
    0b10000000,
    0b11110000,
    0b10001000,
    0b10001000,
    0b01110000,
    6, // 6

    0b11111000,
    0b10001000,
    0b00001000,
    0b00010000,
    0b00100000,
    0b00100000,
    0b00100000,
    6, // 7

    0b01110000,
    0b10001000,
    0b10001000,
    0b01110000,
    0b10001000,
    0b10001000,
    0b01110000,
    6, // 8

    0b01110000,
    0b10001000,
    0b10001000,
    0b01111000,
    0b00001000,
    0b00010000,
    0b01100000,
    6, // 9

    0b00000000,
    0b11000000,
    0b11000000,
    0b00000000,
    0b11000000,
    0b11000000,
    0b00000000,
    3, //:

    0b00000000,
    0b11000000,
    0b11000000,
    0b00000000,
    0b11000000,
    0b01000000,
    0b10000000,
    3, //;

    0b00010000,
    0b00100000,
    0b01000000,
    0b10000000,
    0b01000000,
    0b00100000,
    0b00010000,
    5, //<

    0b00000000,
    0b00000000,
    0b11111000,
    0b00000000,
    0b11111000,
    0b00000000,
    0b00000000,
    6, //=

    0b10000000,
    0b01000000,
    0b00100000,
    0b00010000,
    0b00100000,
    0b01000000,
    0b10000000,
    5, //>

    0b01110000,
    0b10001000,
    0b00001000,
    0b00010000,
    0b00100000,
    0b00000000,
    0b00100000,
    6, //?

    0b01110000,
    0b10001000,
    0b00001000,
    0b01101000,
    0b10101000,
    0b10101000,
    0b01110000,
    6, //@

    0b01110000, // A
    0b10001000,
    0b10001000,
    0b10001000,
    0b11111000,
    0b10001000,
    0b10001000,
    6,

    0b11110000, // B
    0b10001000,
    0b10001000,
    0b11110000,
    0b10001000,
    0b10001000,
    0b11110000,
    6,

    0b01110000, // C
    0b10001000,
    0b10000000,
    0b10000000,
    0b10000000,
    0b10001000,
    0b01110000,
    6,

    0b11100000, // D
    0b10010000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b10010000,
    0b11100000,
    6,

    0b11111000, // E
    0b10000000,
    0b10000000,
    0b11110000,
    0b10000000,
    0b10000000,
    0b11111000,
    6,

    0b11111000, // F
    0b10000000,
    0b10000000,
    0b11110000,
    0b10000000,
    0b10000000,
    0b10000000,
    6,

    0b01110000, // G
    0b10001000,
    0b10000000,
    0b10111000,
    0b10001000,
    0b10001000,
    0b01111000,
    6,

    0b10001000, // H
    0b10001000,
    0b10001000,
    0b11111000,
    0b10001000,
    0b10001000,
    0b10001000,
    6,

    0b11100000, // I
    0b01000000,
    0b01000000,
    0b01000000,
    0b01000000,
    0b01000000,
    0b11100000,
    4,

    0b00111000, // J
    0b00010000,
    0b00010000,
    0b00010000,
    0b00010000,
    0b10010000,
    0b01100000,
    6,

    0b10001000, // K
    0b10010000,
    0b10100000,
    0b11000000,
    0b10100000,
    0b10010000,
    0b10001000,
    6,

    0b10000000, // L
    0b10000000,
    0b10000000,
    0b10000000,
    0b10000000,
    0b10000000,
    0b11111000,
    6,

    0b10001000, // M
    0b11011000,
    0b10101000,
    0b10101000,
    0b10001000,
    0b10001000,
    0b10001000,
    6,

    0b10001000, // N
    0b10001000,
    0b11001000,
    0b10101000,
    0b10011000,
    0b10001000,
    0b10001000,
    6,

    0b01110000, // O
    0b10001000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b01110000,
    6,

    0b11110000, // P
    0b10001000,
    0b10001000,
    0b11110000,
    0b10000000,
    0b10000000,
    0b10000000,
    6,

    0b01110000, // Q
    0b10001000,
    0b10001000,
    0b10001000,
    0b10101000,
    0b10010000,
    0b01101000,
    6,

    0b11110000, // R
    0b10001000,
    0b10001000,
    0b11110000,
    0b10100000,
    0b10010000,
    0b10001000,
    6,

    0b01111000, // S
    0b10000000,
    0b10000000,
    0b01110000,
    0b00001000,
    0b00001000,
    0b11110000,
    6,

    0b11111000, // T
    0b00100000,
    0b00100000,
    0b00100000,
    0b00100000,
    0b00100000,
    0b00100000,
    6,

    0b10001000, // U
    0b10001000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b01110000,
    6,

    0b10001000, // V
    0b10001000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b01010000,
    0b00100000,
    6,

    0b10001000, // W
    0b10001000,
    0b10001000,
    0b10101000,
    0b10101000,
    0b10101000,
    0b01010000,
    6,

    0b10001000, // X
    0b10001000,
    0b01010000,
    0b00100000,
    0b01010000,
    0b10001000,
    0b10001000,
    6,

    0b10001000, // Y
    0b10001000,
    0b10001000,
    0b01010000,
    0b00100000,
    0b00100000,
    0b00100000,
    6,

    0b11111000, // Z
    0b00001000,
    0b00010000,
    0b00100000,
    0b01000000,
    0b10000000,
    0b11111000,
    6,

    0b11100000, //[
    0b10000000,
    0b10000000,
    0b10000000,
    0b10000000,
    0b10000000,
    0b11100000,
    4,

    0b00000000, //(Backward Slash)
    0b10000000,
    0b01000000,
    0b00100000,
    0b00010000,
    0b00001000,
    0b00000000,
    6,

    0b11100000, //]
    0b00100000,
    0b00100000,
    0b00100000,
    0b00100000,
    0b00100000,
    0b11100000,
    4,

    0b00100000, //^
    0b01010000,
    0b10001000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    6,

    0b00000000, //_
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b11111000,
    6,

    0b10000000, //`
    0b01000000,
    0b00100000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    4,

    0b00000000, // a
    0b00000000,
    0b01110000,
    0b00001000,
    0b01111000,
    0b10001000,
    0b01111000,
    6,

    0b10000000, // b
    0b10000000,
    0b10110000,
    0b11001000,
    0b10001000,
    0b10001000,
    0b11110000,
    6,

    0b00000000, // c
    0b00000000,
    0b01110000,
    0b10001000,
    0b10000000,
    0b10001000,
    0b01110000,
    6,

    0b00001000, // d
    0b00001000,
    0b01101000,
    0b10011000,
    0b10001000,
    0b10001000,
    0b01111000,
    6,

    0b00000000, // e
    0b00000000,
    0b01110000,
    0b10001000,
    0b11111000,
    0b10000000,
    0b01110000,
    6,

    0b00110000, // f
    0b01001000,
    0b01000000,
    0b11100000,
    0b01000000,
    0b01000000,
    0b01000000,
    6,

    0b00000000, // g
    0b01111000,
    0b10001000,
    0b10001000,
    0b01111000,
    0b00001000,
    0b01110000,
    6,

    0b10000000, // h
    0b10000000,
    0b10110000,
    0b11001000,
    0b10001000,
    0b10001000,
    0b10001000,
    6,

    0b01000000, // i
    0b00000000,
    0b11000000,
    0b01000000,
    0b01000000,
    0b01000000,
    0b11100000,
    4,

    0b00010000, // j
    0b00000000,
    0b00110000,
    0b00010000,
    0b00010000,
    0b10010000,
    0b01100000,
    5,

    0b10000000, // k
    0b10000000,
    0b10010000,
    0b10100000,
    0b11000000,
    0b10100000,
    0b10010000,
    5,

    0b11000000, // l
    0b01000000,
    0b01000000,
    0b01000000,
    0b01000000,
    0b01000000,
    0b11100000,
    4,

    0b00000000, // m
    0b00000000,
    0b11010000,
    0b10101000,
    0b10101000,
    0b10001000,
    0b10001000,
    6,

    0b00000000, // n
    0b00000000,
    0b10110000,
    0b11001000,
    0b10001000,
    0b10001000,
    0b10001000,
    6,

    0b00000000, // o
    0b00000000,
    0b01110000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b01110000,
    6,

    0b00000000, // p
    0b00000000,
    0b11110000,
    0b10001000,
    0b11110000,
    0b10000000,
    0b10000000,
    6,

    0b00000000, // q
    0b00000000,
    0b01101000,
    0b10011000,
    0b01111000,
    0b00001000,
    0b00001000,
    6,

    0b00000000, // r
    0b00000000,
    0b10110000,
    0b11001000,
    0b10000000,
    0b10000000,
    0b10000000,
    6,

    0b00000000, // s
    0b00000000,
    0b01110000,
    0b10000000,
    0b01110000,
    0b00001000,
    0b11110000,
    6,

    0b01000000, // t
    0b01000000,
    0b11100000,
    0b01000000,
    0b01000000,
    0b01001000,
    0b00110000,
    6,

    0b00000000, // u
    0b00000000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b10011000,
    0b01101000,
    6,

    0b00000000, // v
    0b00000000,
    0b10001000,
    0b10001000,
    0b10001000,
    0b01010000,
    0b00100000,
    6,

    0b00000000, // w
    0b00000000,
    0b10001000,
    0b10101000,
    0b10101000,
    0b10101000,
    0b01010000,
    6,

    0b00000000, // x
    0b00000000,
    0b10001000,
    0b01010000,
    0b00100000,
    0b01010000,
    0b10001000,
    6,

    0b00000000, // y
    0b00000000,
    0b10001000,
    0b10001000,
    0b01111000,
    0b00001000,
    0b01110000,
    6,

    0b00000000, // z
    0b00000000,
    0b11111000,
    0b00010000,
    0b00100000,
    0b01000000,
    0b11111000,
    6,

    0b00100000, //{
    0b01000000,
    0b01000000,
    0b10000000,
    0b01000000,
    0b01000000,
    0b00100000,
    4,

    0b10000000, //|
    0b10000000,
    0b10000000,
    0b10000000,
    0b10000000,
    0b10000000,
    0b10000000,
    2,

    0b10000000, //}
    0b01000000,
    0b01000000,
    0b00100000,
    0b01000000,
    0b01000000,
    0b10000000,
    4,

    0b00000000, //~
    0b00000000,
    0b00000000,
    0b01101000,
    0b10010000,
    0b00000000,
    0b00000000,
    6,

    0b01100000, // (Char 0x7F)
    0b10010000,
    0b10010000,
    0b01100000,
    0b00000000,
    0b00000000,
    0b00000000,
    5,

    0b00000000, // smiley
    0b01100000,
    0b01100110,
    0b00000000,
    0b10000001,
    0b01100110,
    0b00011000,
    5};

const long scrollDelay = 100; // adjust scrolling speed

#define bitRead(value, bit) (((value) >> (bit)) & 0x01)

#ifndef bitWrite
#define bitWrite(value, bit, bitvalue) ((bitvalue) ? bitSet(value, bit) : bitClear(value, bit))
#endif

#define bitSet(value, bit) ((value) |= (1UL << (bit)))

#define bitClear(value, bit) ((value) &= ~(1UL << (bit)))

// Rotate the buffer
void TextAnimation::rotateBufferLong()
{
    for (int a = 0; a < 7; a++)
    {
        unsigned long x = _bufferLong[a * 2];
        uint8_t b = bitRead(x, 0);
        x = x >> 1;
        _bufferLong[a * 2] = x;
        x = _bufferLong[a * 2 + 1];
        x = x >> 1;
        bitWrite(x, 31, b);
        _bufferLong[a * 2 + 1] = x;
    }
}

void TextAnimation::printBufferLong()
{
    uint8_t frame[8] = {0};

    for (int a = 0; a < 7; a++)
    {
        unsigned long x = _bufferLong[a * 2 + 1];
        frame[a] = x;
    }

    app->ledMatrix.displayFrame(frame);
    app->ledMatrix.setIntensity(15);
}

unsigned char reversByte(unsigned char b)
{
    unsigned char reversed_b = 0;
    for (int i = 0; i < 8; i++)
    {
        if ((b >> i) & 1)
        {
            reversed_b |= (1 << (7 - i));
        }
    }
    return reversed_b;
}

#include <stdio.h>

void TextAnimation::loadBufferLong(int unicode)
{
    const uint8_t *p;

    if (unicode >= 0x20 && unicode <= 0x7f)
    {
        p = &font5x7[((unicode - 0x20) * 8)];
    }
    else if (unicode >= 1040 && unicode <= 1103)
    {
        p = &font5x7_ru[((unicode - 1040) * 8)];
    }
    else
    {
        return;
    }

    for (int a = 0; a < 7; a++)
    {
        unsigned int c = reversByte(p[a]);
        unsigned int x = _bufferLong[a * 2];
        x = x | c;
        _bufferLong[a * 2] = x;
    }

    uint8_t count = p[7];
    for (uint8_t x = 0; x < count; x++)
    {
        rotateBufferLong();
        printBufferLong();
        app->delay(scrollDelay);
    }
}

void TextAnimation::animate()
{
    int counter = 0;
    char16_t c = 0;
    do
    {
        c = _text[counter];
        if (c != 0)
        {
            loadBufferLong(c);
        }
        counter++;
    } while (c != 0);
}